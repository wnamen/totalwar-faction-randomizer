{"version":3,"sources":["randomizer.js","App.js","serviceWorker.js","index.js"],"names":["totalwar_factions","require","totalwar_meta","randomizer","meta","factions","availableFactions","filter","faction","free","dlc","includes","this","availableCampaigns","availableDLCs","availablePacks","campaigns","includeCavOnly","includeSuper","maxPlayers","numberOfPlayers","packs","selectedCampaign","selectedDLCs","selectedFactions","unique","campaign","c","some","f","name","getCampaignFactions","i","selectRandomFaction","min","Math","ceil","max","floor","length","random","rand","getRandomInt","selected","push","splice","checkbox","document","getElementById","checked","disabled","indexOf","selectedIndex","getCampaigns","players","rome_2","App","state","dlcs","getFactions","e","a","preventDefault","setState","reset","resetRandomizer","render","className","id","map","idx","key","type","defaultChecked","onClick","setDLC","for","form","onChange","setCampaign","target","value","defaultValue","setNumberOfPlayers","Array","_","setUnique","campaignSelect","options","React","Component","Boolean","window","location","hostname","match","ReactDOM","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.730c35b6.chunk.js","sourcesContent":["const totalwar_factions = require('./factions.json')\nconst totalwar_meta = require('./meta.json')\n\nclass Randomizer {\n  constructor(meta, factions) {\n    const availableFactions = factions.filter((faction) => (faction.free || faction.dlc.includes(\"Grand Campaign\")))\n\n    this.availableCampaigns = [...meta.availableCampaigns];\n    this.availableDLCs = [...meta.availableCampaigns, ...meta.availablePacks];\n    this.availableFactions = availableFactions;\n    this.campaigns = [...meta.availableCampaigns];\n    this.factions = [...factions];\n    this.includeCavOnly = true;\n    this.includeSuper = true;\n    this.maxPlayers = 8;\n    this.numberOfPlayers = 2;\n    this.packs = [...meta.availablePacks];\n    this.selectedCampaign = \"Grand Campaign\";\n    this.selectedDLCs = [\"Rise of the Republic\", \"Empire Divided\", \"Wrath of Sparta\", \"Hannibal at the Gates\", \"Ceasar in Gaul\", \"Imperator Augustus\", \"Greek States\", \"Nomadic Tribes\", \"Pirates and Raiders\", \"Black Sea Colonies\"]\n    this.selectedFactions = [];\n    this.unique = true;\n  }\n\n  async getCampaigns(campaign) {\n    const campaigns = this.campaigns;\n    const availableCampaigns = this.availableCampaigns\n\n    if (!campaigns.includes(campaign)) {\n      return availableCampaigns;\n    }\n\n    if (availableCampaigns.includes(campaign)) {\n      return availableCampaigns.filter((c) => c !== campaign)\n    }\n\n    return [...availableCampaigns, campaign];\n  }\n\n  async getCampaignFactions(campaign) {\n    const selectedDLCs = this.selectedDLCs;\n\n    return this.factions.filter((faction) => {\n      switch (campaign) {\n        case \"Grand Campaign\": {\n          if (faction.free || (faction.dlc.includes(\"Grand Campaign\") && faction.dlc.some(f => selectedDLCs.includes(f)))) {\n            return faction;\n          }\n          break;\n        }\n\n        case \"Ceasar in Gaul\": {\n          const bannedFactions = [\"Boii\", \"Galatia\"]\n          if (faction.dlc.includes(\"Ceasar in Gaul\") && faction.dlc.some(f => selectedDLCs.includes(f)) && !bannedFactions.includes(faction.name)) {\n            return faction;\n          }\n          break;\n        }\n\n        default: {\n          if (faction.dlc.includes(campaign) && faction.dlc.some(f => selectedDLCs.includes(f))) {\n            return faction\n          }\n        }\n      }\n    })\n  }\n\n  async getFactions() {\n    this.selectedFactions = [];\n    this.availableFactions = await this.getCampaignFactions(this.selectedCampaign);\n\n    for (let i = 0; i < this.numberOfPlayers; i++) {\n      await this.selectRandomFaction();\n    }\n\n    return this.selectedFactions;\n  }\n\n  getRandomInt() {\n    const min = Math.ceil(0);\n    const max = Math.floor(this.availableFactions.length - 1);\n    return Math.floor(Math.random() * (max - min + 1)) + min;\n  }\n\n  getSelected() {\n    return this.selectedFactions;\n  }\n\n  resetRandomizer() {\n    const availableFactions = this.factions.filter((faction) => (faction.free || faction.dlc.includes(\"Grand Campaign\")))\n\n    this.availableFactions = availableFactions;\n    this.includeCavOnly = true;\n    this.includeSuper = true;\n    this.maxPlayers = 8;\n    this.numberOfPlayers = 2;\n    this.selectedCampaign = \"Grand Campaign\";\n    this.selectedDLCs = [\"Rise of the Republic\", \"Empire Divided\", \"Wrath of Sparta\", \"Hannibal at the Gates\", \"Ceasar in Gaul\", \"Imperator Augustus\", \"Greek States\", \"Nomadic Tribes\", \"Pirates and Raiders\", \"Black Sea Colonies\"]\n    this.selectedFactions = [];\n    this.unique = true;\n  }\n\n  selectRandomFaction() {\n    const rand = this.getRandomInt()\n    const selected = this.availableFactions[rand]\n\n    this.selectedFactions.push(selected)\n\n    if (this.unique) {\n      let availableFactions = this.availableFactions;\n      availableFactions.splice(rand, 1)\n      this.availableFactions = availableFactions;\n    }\n\n    return selected\n  }\n\n  async setCampaign(campaign) {\n    this.selectedCampaign = campaign;\n    this.availableFactions = await this.getCampaignFactions(campaign);\n\n    const checkbox = document.getElementById(\"unique\");\n\n    if (this.numberOfPlayers > this.availableFactions.length) {\n      this.unique = false;\n      checkbox.checked = false;\n      checkbox.disabled = true;\n    } else if (checkbox.disabled && this.numberOfPlayers <= this.availableFactions.length) {\n      checkbox.disabled = false;\n    }\n  }\n\n  async setDLC(dlc) {\n    let selectedDLCs = this.selectedDLCs;\n\n    if (this.selectedDLCs.includes(dlc)) {\n      selectedDLCs.splice(selectedDLCs.indexOf(dlc), 1);\n      this.selectedDLCs = selectedDLCs;\n\n      if (this.selectedCampaign === dlc) {\n        this.selectedCampaign = \"Grand Campaign\";\n        document.getElementById(\"campaign\").selectedIndex = 0;\n      }\n    } else {\n      selectedDLCs.push(dlc)\n      this.selectedDLCs = selectedDLCs;\n    }\n\n    this.availableFactions = await this.getCampaignFactions(this.selectedCampaign)\n    this.availableCampaigns = await this.getCampaigns(dlc)\n\n    return this.selectedDLCs;\n  }\n\n  setIncludeCavOnly(includeCavOnly) {\n    this.includeCavOnly = includeCavOnly;\n  }\n\n  setIncludeSuper(includeSuper) {\n    this.includeSuper = includeSuper;\n  }\n\n  setNumberOfPlayers(players) {\n    this.numberOfPlayers = players;\n\n    const checkbox = document.getElementById(\"unique\");\n\n    if (this.numberOfPlayers > this.availableFactions.length) {\n      this.unique = false;\n      checkbox.checked = false;\n      checkbox.disabled = true;\n    } else if (checkbox.disabled && this.numberOfPlayers <= this.availableFactions.length) {\n      checkbox.disabled = false;\n    }\n  }\n\n  setUnique(unique) {\n    this.unique = unique;\n  }\n}\n\nconst randomizer = new Randomizer(totalwar_meta.rome_2, totalwar_factions.rome_2);\nexport default randomizer;","import React from \"react\";\nimport \"./App.css\";\n\nimport randomizer from \"./randomizer\";\n\nclass App extends React.Component {\n  state = {\n    campaigns: randomizer.availableCampaigns,\n    dlcs: randomizer.availableDLCs,\n    factions: []\n  };\n\n  getFactions = async e => {\n    e.preventDefault();\n\n    const factions = await randomizer.getFactions();\n    this.setState({\n      factions\n    });\n  };\n\n  reset = e => {\n    e.preventDefault();\n\n    randomizer.resetRandomizer();\n\n    document.getElementById(\"randomizer-form\").reset();\n    document.getElementById(\"players\").selectedIndex = 1;\n\n    this.setState({\n      campaigns: [...randomizer.availableCampaigns],\n      dlcs: [...randomizer.availableDLCs],\n      factions: []\n    });\n  };\n\n  render = () => {\n    const { campaigns, dlcs, factions } = this.state;\n\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <h1> Total War: Rome 2 Faction Randomizer </h1>\n        </header>\n        <div className=\"App-body\">\n          <form id=\"randomizer-form\">\n            <fieldset className=\"inline_block\">\n              <legend> Which DLCs do you have ? </legend>\n              {dlcs.map((dlc, idx) => (\n                <div key={idx}>\n                  <input\n                    type=\"checkbox\"\n                    defaultChecked\n                    id={dlc}\n                    onClick={this.setDLC}\n                    name=\"dlc\"\n                  />\n                  <label for={dlc}> {dlc} </label>\n                </div>\n              ))}\n            </fieldset>\n            <div className=\"inline_block\">\n              <fieldset>\n                <legend> Choose a campaign </legend>\n                <select\n                  form=\"randomizer-form\"\n                  id=\"campaign\"\n                  name=\"campaign-select\"\n                  onChange={e => randomizer.setCampaign(e.target.value)}\n                >\n                  <option defaultValue value=\"Grand Campaign\">\n                    Grand Campaign\n                  </option>\n                  {campaigns.map((campaign, idx) => (\n                    <option key={idx} value={campaign}>\n                      {campaign}\n                    </option>\n                  ))}\n                </select>\n              </fieldset>\n              <fieldset>\n                <legend> How many players ? </legend>\n                <select\n                  form=\"randomizer-form\"\n                  id=\"players\"\n                  name=\"players-select\"\n                  onChange={e => randomizer.setNumberOfPlayers(e.target.value)}\n                >\n                  {[...Array(8)].map((_, idx) => (\n                    <option key={idx} selected={idx + 1 === 2} value={idx + 1}>\n                      {idx + 1}\n                    </option>\n                  ))}\n                </select>\n              </fieldset>\n              <fieldset>\n                <legend> Should each faction be unique ? </legend>\n                <div>\n                  <input\n                    type=\"checkbox\"\n                    defaultChecked\n                    id=\"unique\"\n                    onClick={this.setUnique}\n                    name=\"unique\"\n                  />\n                  <label for=\"unique\"> Unique </label>\n                </div>\n              </fieldset>\n              <div className=\"buttons\">\n                <button onClick={this.getFactions}> randomize! </button>\n                <button onClick={this.reset}> reset </button>\n              </div>\n            </div>\n          </form>\n          <div className=\"results-container\">\n            {factions.map(({ name }, idx) => (\n              <div className=\"result-container\" key={idx}>\n                <span className=\"result-faction\"> {name} </span>\n                <span className=\"result-player\"> Player {idx + 1} </span>\n              </div>\n            ))}\n          </div>\n        </div>\n      </div>\n    );\n  };\n\n  setDLC = async e => {\n    await randomizer.setDLC(e.target.id);\n    const campaigns = randomizer.availableCampaigns;\n\n    this.setState(\n      {\n        campaigns\n      },\n      () => {\n        const selectedCampaign = randomizer.selectedCampaign;\n        const campaignSelect = document.getElementById(\"campaign\");\n\n        for (let i = 0; i < campaignSelect.options.length; i++) {\n          const o = campaignSelect.options[i];\n\n          if (o.value === selectedCampaign) {\n            return (campaignSelect.selectedIndex = i);\n          }\n        }\n      }\n    );\n  };\n\n  setUnique = e => {\n    randomizer.setUnique(!randomizer.unique);\n  };\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}