{"version":3,"sources":["randomizer.js","App.js","serviceWorker.js","index.js"],"names":["totalwar_factions","require","totalwar_meta","randomizer","meta","factions","availableFactions","filter","faction","free","dlc","includes","this","availableCampaigns","availableDLCs","availablePacks","campaigns","includeCavOnly","includeSuper","numberOfPlayers","packs","selectedCampaign","selectedDLCs","selectedFactions","unique","campaign","c","some","f","name","getCampaignFactions","i","selectRandomFaction","min","Math","ceil","max","floor","length","random","rand","getRandomInt","selected","push","splice","checkbox","document","getElementById","checked","disabled","indexOf","selectedIndex","getCampaigns","players","rome_2","App","state","dlcs","getFactions","e","a","preventDefault","setState","reset","resetRandomizer","render","className","href","rel","target","id","map","idx","key","type","defaultChecked","onClick","setDLC","for","form","onChange","setCampaign","value","defaultValue","setNumberOfPlayers","Array","_","setUnique","campaignSelect","options","React","Component","Boolean","window","location","hostname","match","ReactDOM","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.5758ef90.chunk.js","sourcesContent":["const totalwar_factions = require('./factions.json')\nconst totalwar_meta = require('./meta.json')\n\nclass Randomizer {\n  constructor(meta, factions) {\n    const availableFactions = factions.filter((faction) => (faction.free || faction.dlc.includes(\"Grand Campaign\")))\n\n    this.availableCampaigns = [...meta.availableCampaigns];\n    this.availableDLCs = [...meta.availableCampaigns, ...meta.availablePacks];\n    this.availableFactions = availableFactions;\n    this.campaigns = [...meta.availableCampaigns];\n    this.factions = [...factions];\n    this.includeCavOnly = true;\n    this.includeSuper = true;\n    this.numberOfPlayers = 2;\n    this.packs = [...meta.availablePacks];\n    this.selectedCampaign = \"Grand Campaign\";\n    this.selectedDLCs = [\"Rise of the Republic\", \"Empire Divided\", \"Wrath of Sparta\", \"Hannibal at the Gates\", \"Ceasar in Gaul\", \"Imperator Augustus\", \"Greek States\", \"Nomadic Tribes\", \"Desert Kingdoms\", \"Pirates and Raiders\", \"Black Sea Colonies\"]\n    this.selectedFactions = [];\n    this.unique = true;\n  }\n\n  async getCampaigns(campaign) {\n    const campaigns = this.campaigns;\n    const availableCampaigns = this.availableCampaigns\n\n    if (!campaigns.includes(campaign)) {\n      return availableCampaigns;\n    }\n\n    if (availableCampaigns.includes(campaign)) {\n      return availableCampaigns.filter((c) => c !== campaign)\n    }\n\n    return [...availableCampaigns, campaign];\n  }\n\n  async getCampaignFactions(campaign) {\n    const selectedDLCs = this.selectedDLCs;\n\n    return this.factions.filter((faction) => {\n      switch (campaign) {\n        case \"Grand Campaign\": {\n          if (faction.free || (faction.dlc.includes(\"Grand Campaign\") && faction.dlc.some(f => selectedDLCs.includes(f)))) {\n            return faction;\n          }\n          break;\n        }\n\n        case \"Ceasar in Gaul\": {\n          const bannedFactions = [\"Boii\", \"Galatia\"]\n          if (faction.dlc.includes(\"Ceasar in Gaul\") && faction.dlc.some(f => selectedDLCs.includes(f)) && !bannedFactions.includes(faction.name)) {\n            return faction;\n          }\n          break;\n        }\n\n        default: {\n          if (faction.dlc.includes(campaign) && faction.dlc.some(f => selectedDLCs.includes(f))) {\n            return faction\n          }\n        }\n      }\n    })\n  }\n\n  async getFactions() {\n    this.selectedFactions = [];\n    this.availableFactions = await this.getCampaignFactions(this.selectedCampaign);\n\n    for (let i = 0; i < this.numberOfPlayers; i++) {\n      await this.selectRandomFaction();\n    }\n\n    return this.selectedFactions;\n  }\n\n  getRandomInt() {\n    const min = Math.ceil(0);\n    const max = Math.floor(this.availableFactions.length - 1);\n    return Math.floor(Math.random() * (max - min + 1)) + min;\n  }\n\n  getSelected() {\n    return this.selectedFactions;\n  }\n\n  resetRandomizer() {\n    const availableFactions = this.factions.filter((faction) => (faction.free || faction.dlc.includes(\"Grand Campaign\")))\n\n    this.availableCampaigns = [...this.campaigns];\n    this.availableFactions = availableFactions;\n    this.includeCavOnly = true;\n    this.includeSuper = true;\n    this.numberOfPlayers = 2;\n    this.selectedCampaign = \"Grand Campaign\";\n    this.selectedDLCs = [\"Rise of the Republic\", \"Empire Divided\", \"Wrath of Sparta\", \"Hannibal at the Gates\", \"Ceasar in Gaul\", \"Imperator Augustus\", \"Greek States\", \"Nomadic Tribes\", \"Pirates and Raiders\", \"Black Sea Colonies\"]\n    this.selectedFactions = [];\n    this.unique = true;\n  }\n\n  selectRandomFaction() {\n    const rand = this.getRandomInt()\n    const selected = this.availableFactions[rand]\n\n    this.selectedFactions.push(selected)\n\n    if (this.unique) {\n      let availableFactions = this.availableFactions;\n      availableFactions.splice(rand, 1)\n      this.availableFactions = availableFactions;\n    }\n\n    return selected\n  }\n\n  async setCampaign(campaign) {\n    this.selectedCampaign = campaign;\n    this.availableFactions = await this.getCampaignFactions(campaign);\n\n    const checkbox = document.getElementById(\"unique\");\n\n    if (this.numberOfPlayers > this.availableFactions.length) {\n      this.unique = false;\n      checkbox.checked = false;\n      checkbox.disabled = true;\n    } else if (checkbox.disabled && this.numberOfPlayers <= this.availableFactions.length) {\n      checkbox.disabled = false;\n    }\n  }\n\n  async setDLC(dlc) {\n    let selectedDLCs = this.selectedDLCs;\n\n    if (this.selectedDLCs.includes(dlc)) {\n      selectedDLCs.splice(selectedDLCs.indexOf(dlc), 1);\n      this.selectedDLCs = selectedDLCs;\n\n      if (this.selectedCampaign === dlc) {\n        this.selectedCampaign = \"Grand Campaign\";\n        document.getElementById(\"campaign\").selectedIndex = 0;\n      }\n    } else {\n      selectedDLCs.push(dlc)\n      this.selectedDLCs = selectedDLCs;\n    }\n\n    this.availableFactions = await this.getCampaignFactions(this.selectedCampaign)\n    this.availableCampaigns = await this.getCampaigns(dlc)\n\n    return this.selectedDLCs;\n  }\n\n  setIncludeCavOnly(includeCavOnly) {\n    this.includeCavOnly = includeCavOnly;\n  }\n\n  setIncludeSuper(includeSuper) {\n    this.includeSuper = includeSuper;\n  }\n\n  setNumberOfPlayers(players) {\n    this.numberOfPlayers = players;\n\n    const checkbox = document.getElementById(\"unique\");\n\n    if (this.numberOfPlayers > this.availableFactions.length) {\n      this.unique = false;\n      checkbox.checked = false;\n      checkbox.disabled = true;\n    } else if (checkbox.disabled && this.numberOfPlayers <= this.availableFactions.length) {\n      checkbox.disabled = false;\n    }\n  }\n\n  setUnique(unique) {\n    this.unique = unique;\n  }\n}\n\nconst randomizer = new Randomizer(totalwar_meta.rome_2, totalwar_factions.rome_2);\nexport default randomizer;","import React from \"react\";\nimport \"./App.css\";\n\nimport randomizer from \"./randomizer\";\n\nclass App extends React.Component {\n  state = {\n    campaigns: randomizer.availableCampaigns,\n    dlcs: randomizer.availableDLCs,\n    factions: []\n  };\n\n  getFactions = async e => {\n    e.preventDefault();\n\n    const factions = await randomizer.getFactions();\n    this.setState({\n      factions\n    });\n  };\n\n  reset = e => {\n    e.preventDefault();\n\n    randomizer.resetRandomizer();\n\n    document.getElementById(\"randomizer-form\").reset();\n    document.getElementById(\"players\").selectedIndex = 1;\n\n    this.setState({\n      campaigns: [...randomizer.availableCampaigns],\n      dlcs: [...randomizer.availableDLCs],\n      factions: []\n    });\n  };\n\n  render = () => {\n    const { campaigns, dlcs, factions } = this.state;\n\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <h1> Total War: Rome 2 Faction Randomizer </h1>\n          <span>\n            A project by&nbsp;\n            <a\n              href=\"https://github.com/wnamen\"\n              rel=\"noopener noreferrer\"\n              target=\"_blank\"\n            >\n              wnamen\n            </a>\n          </span>\n        </header>\n        <div className=\"App-body\">\n          <form id=\"randomizer-form\">\n            <fieldset className=\"inline_block\">\n              <legend> Which DLCs do you have ? </legend>\n              {dlcs.map((dlc, idx) => (\n                <div key={idx}>\n                  <input\n                    type=\"checkbox\"\n                    defaultChecked\n                    id={dlc}\n                    onClick={this.setDLC}\n                    name=\"dlc\"\n                  />\n                  <label for={dlc}> {dlc} </label>\n                </div>\n              ))}\n            </fieldset>\n            <div className=\"inline_block\">\n              <fieldset>\n                <legend> Choose a campaign </legend>\n                <select\n                  form=\"randomizer-form\"\n                  id=\"campaign\"\n                  name=\"campaign-select\"\n                  onChange={e => randomizer.setCampaign(e.target.value)}\n                >\n                  <option defaultValue value=\"Grand Campaign\">\n                    Grand Campaign\n                  </option>\n                  {campaigns.map((campaign, idx) => (\n                    <option key={idx} value={campaign}>\n                      {campaign}\n                    </option>\n                  ))}\n                </select>\n              </fieldset>\n              <fieldset>\n                <legend> How many players ? </legend>\n                <select\n                  form=\"randomizer-form\"\n                  id=\"players\"\n                  name=\"players-select\"\n                  onChange={e => randomizer.setNumberOfPlayers(e.target.value)}\n                >\n                  {[...Array(8)].map((_, idx) => (\n                    <option key={idx} selected={idx + 1 === 2} value={idx + 1}>\n                      {idx + 1}\n                    </option>\n                  ))}\n                </select>\n              </fieldset>\n              <fieldset>\n                <legend> Should each faction be unique ? </legend>\n                <div>\n                  <input\n                    type=\"checkbox\"\n                    defaultChecked\n                    id=\"unique\"\n                    onClick={this.setUnique}\n                    name=\"unique\"\n                  />\n                  <label for=\"unique\"> Unique </label>\n                </div>\n              </fieldset>\n              <div className=\"buttons\">\n                <button onClick={this.getFactions}> randomize! </button>\n                <button onClick={this.reset}> reset </button>\n              </div>\n            </div>\n          </form>\n          <div className=\"results-container\">\n            {factions.map(({ name }, idx) => (\n              <div className=\"result-container\" key={idx}>\n                <span className=\"result-faction\"> {name} </span>\n                <span className=\"result-player\"> Player {idx + 1} </span>\n              </div>\n            ))}\n          </div>\n        </div>\n      </div>\n    );\n  };\n\n  setDLC = async e => {\n    await randomizer.setDLC(e.target.id);\n    const campaigns = randomizer.availableCampaigns;\n\n    this.setState(\n      {\n        campaigns\n      },\n      () => {\n        const selectedCampaign = randomizer.selectedCampaign;\n        const campaignSelect = document.getElementById(\"campaign\");\n\n        for (let i = 0; i < campaignSelect.options.length; i++) {\n          const o = campaignSelect.options[i];\n\n          if (o.value === selectedCampaign) {\n            return (campaignSelect.selectedIndex = i);\n          }\n        }\n      }\n    );\n  };\n\n  setUnique = e => {\n    randomizer.setUnique(!randomizer.unique);\n  };\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}